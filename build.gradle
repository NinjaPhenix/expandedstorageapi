plugins {
    id "fabric-loom" version "0.2.6-SNAPSHOT"
	id "java"
	id "com.github.breadmoirai.github-release" version "2.2.10"
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	archivesBaseName = project.mod_id
}

minecraft {
    refmapName = "${project.mod_id}-refmap.json"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
    maven { url "https://tehnut.info/maven/" }
    flatDir { dirs "includes" }
}

dependencies {
    minecraft("com.mojang:minecraft:${minecraft_version}")
    mappings("net.fabricmc:yarn:${minecraft_version}+${yarn_version}:v2")
    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    modImplementation("me.shedaniel:RoughlyEnoughItems:${rei_version}")
    {
        exclude(group: "net.fabricmc", module: "fabric-loader")
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "io.github.prospector", module: "modmenu")
    }

    modImplementation("io.github.prospector:modmenu:${modmenu_version}")
    {
        exclude (group: "net.fabricmc", module: "fabric-loader")
        exclude (group: "net.fabricmc.fabric-api")
    }

    modImplementation("towelette:Towelette:2.1.3+1.15") // Remove Only to add towlette to dev.
    modImplementation("statement:Statement:1.2.0+1.14.4")

	modApi("ninjaphenix:ninjaphenix-container-lib:${containerlib_version}")
	include("ninjaphenix:ninjaphenix-container-lib:${containerlib_version}")

    compileOnly("org.checkerframework:checker-qual:3.0.1")
}

processResources {
    inputs.property "version", project.version
    from(sourceSets.main.resources.srcDirs) {
        include("fabric.mod.json")
        expand("version": version)
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude("fabric.mod.json")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jar { from("LICENSE") }

runClient {
    args = ["--username", "Dev"]
}

tasks.withType(JavaCompile) { options.setEncoding("UTF-8") }

tasks.getByName("githubRelease") {
	dependsOn(tasks.getByName("build"))
}

githubRelease {
	token = project.hasProperty("github_api_key") ? project.getProperty("github_api_key") : ""
	owner "ninjaphenix"
	repo "expandedstorageapi"
	tagName "v${project.mod_version}"
	targetCommitish project.minecraft_version
	releaseAssets remapJar.destinationDirectory.getAsFile().get().listFiles((java.io.FilenameFilter) {dir, name -> name.contains(project.mod_version)})
	overwrite true
}